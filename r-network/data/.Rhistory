version
getpwd()
getwd()
getwd()
exit
quit()
install.packages(swirl)
"swirl"
swirl()
install.packages("swirl")
swirl()
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mysqrt<-sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/mysqrt
my_div<-z/mysqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
q
info()
main()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <-
| c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
main()
my_vektor <- 1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
main
main()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first
| function!')
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4, 5, 10))
my_mean(c(4, 5, 10))
View(my_mean)
submit()
remainder(5)
remainder (11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[-1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello, World!")
submit()
submit()
mad_libs(place = "Moscow", adjective = "horrible", "beer")
submit
submit()
"I" %p% "love" %p% "R!"
head(frlags)
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <-lapply(flags, class)
cls_list
calss(cls_list)
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags [, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mar
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_val <- lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
table(flags$animate,flags$landmass, mean)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red,summary).
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass,summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(flags)
str(plants)
?sample
sample(1:6,4, replace=TRUE)
sample(1:6,4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100, replace=TRUE)
flips<-sample(c(0,1),100, replace=TRUE, prob= c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size =100, prob = 0.7)
flips2 <- rbinom(1, size =100, prob =0.7)
flips2 <- rbinom(100, size =1, prob =0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(dq)
unclass(d1)
d1
d2<- as.Date("1969-01-01")
unclass
unclass(d2)
t1 <-Sys.time()
t1
class (t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass
unclass(t2)
atr(unclass(t2))
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
View(plants)
View(my_matrix)
View(my_matrix)
View(plants)
View(t4)
packageVersion('swirl')
install_course("The R Programming Environment")
library('swirl')
install_course("The R Programming Environment")
swirl()
swirl()
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <z/my_sqrt
my_div <-z/my_sqrt
my_div
c(1:4) + c(0,10)
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
Type seq_along(my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
swirl()
num_vect <- (0.5,55,-10)
num_vect <- (0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Evgeny")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA, 5, NA)
x*3
y<-rnorm(1000)
z <- rep (NA,1000)
my_data <- sample(c(y,z),100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
library (tigris)
install.packages("tigris")
install.packages('tigris')
install.packages('tigris')
library(installr)
install.packages("installr")
install.packages("installr")
install.packages("installr")
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
OlsonNames()
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
install.packages(c("boot", "class", "cluster", "codetools", "crayon", "curl", "digest", "foreign", "httr", "jsonlite", "lattice", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "openssl", "R6", "RCurl", "rpart", "spatial", "stringi", "stringr", "survival", "testthat", "yaml"))
version()
version()
version()
version
version
install.packages("installr")
install.packages("tigris")
exit
quit
quit()
version
quit()
install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
View(t2)
install.packages(c("BH", "bindr", "DBI", "devtools", "httpuv", "knitr", "MASS", "mgcv", "nlme", "openssl", "pillar", "psych", "Rcpp", "rgdal", "rlang", "rmarkdown", "rpart", "stringi", "stringr", "tidyselect", "withr", "yaml"))
install.packages(installr)
install.packages("installr")
install.packages("installr")
version
version
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(readxl)
DP <- read_excel("Desktop/TMP/DP.xlsx", sheet = "Source_Data")
View(DP)
DP <- DP[-c(1,2,3),,drop=F]
colnames(DP)
DP %>% select(1,2,3,4,5,28)
DP1 <- DP[,1:5,28]
DP1
colnames(DP1)
DP1 <- DP[,1:5,28,]
DP1 <- DP[,1:5,28,,]
DP1 <- DP[,1:5,28]
colnames(DP1)
DP1 <- DP[,c(1:5,28)]
colnames(DP1)
DP1
View(DP1)
separate_rows(DP1,sep = "|")
separate_rows(DP1,'Source Asset', sep = "|",convert = FALSE)
separate_rows(DP1,'Source Asset', sep = "\|",convert = FALSE)
separate_rows(DP1,'Source Asset', sep = '|',convert = FALSE)
separate_rows(DP1,'Source Asset', sep = '\\|',convert = FALSE)
DP %>% select(1,2,3,4,5,28)
DP %>% select(1:6,28)
DP %>% select(1:6,28) %>% filter(SPI="SPI")
DP %>% select(1:6,28) %>% filter(SPI=="SPI")
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE)
DP %>% +select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE)
DP %>%
select(1:6,28)
DP %>%
select(1:6,28)
DP %>% +select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE)
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE)
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE) %>% transmute('Source Asset' = substr('Source asset', start = 1, stop = 10))
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE) %>% transmute('Source Asset' = substr($'Source Asset', start = 1, stop = 10))
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE) %>% transmute('Source Asset' = substr(DP$'Source Asset', start = 1, stop = 10))
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE) %>% transmute('Source Asset' = substr($`Source Asset`, 0, 3))
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE) %>% transmute('Source Asset' = substr(`Source Asset`, 0, 3))
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE) %>% transmute('Source Asset' = substr(`Source Asset`, 0, 10))
DP %>% select(1:6,28) %>% filter(SPI=="SPI") %>% separate_rows('Source Asset',sep='\\|',convert = FALSE) %>% mutate('Source Asset' = substr(`Source Asset`, 0, 10))
View(DP.FINAL)
DP <- read_excel("Desktop/TMP/DP.xlsx", sheet = "Source_Data")
DP <- DP[-c(1,2,3),,drop=F]
DP.FINAL<-DP %>%
select(1:6,28) %>%
filter(SPI=="SPI") %>%
separate_rows('Source Asset',sep='\\|',convert = FALSE) %>%
mutate('Source Asset' = substr(`Source Asset`, 0, 10))
View(DP.FINAL)
write_csv(DP.FINAL,"Desktop/TMP/DP.FINAL.csv")
version]
version
install.packages(c("assertthat", "backports", "BH", "bindrcpp", "boot", "broom", "callr", "caTools", "class", "classInt", "cli", "cluster", "codetools", "colorspace", "cubature", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "e1071", "evaluate", "forcats", "foreign", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "hms", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "lazyeval", "lubridate", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "munsell", "nlme", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "R6", "Rcpp", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rpart", "rstudioapi", "rvest", "scales", "selectr", "sf", "shiny", "sourcetools", "sp", "statsr", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tigris", "units", "utf8", "whisker", "xml2", "xtable", "yaml"))
installed.packages(tidyverse)
installed.packages("tidyverse")
install.packages(c("assertthat", "backports", "BH", "bindrcpp", "boot", "broom", "callr", "caTools", "class", "classInt", "cli", "cluster", "codetools", "colorspace", "cubature", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "e1071", "evaluate", "forcats", "foreign", "ggplot2", "git2r", "glue", "gtable", "haven", "highr", "hms", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "lazyeval", "lubridate", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "munsell", "nlme", "openssl", "pillar", "pkgconfig", "plogr", "psych", "purrr", "R6", "Rcpp", "readr", "readxl", "reprex", "rlang", "rmarkdown", "rpart", "rstudioapi", "rvest", "scales", "selectr", "sf", "shiny", "sourcetools", "sp", "statsr", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tigris", "units", "utf8", "whisker", "xml2", "xtable", "yaml"))
mydata <- read.csv(file.choose())
installed.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("tidyverse")
ggplot(data=mydata, aes(x=carat, y=price))+
geom_point()
install.packages("ggplot2")
ggplot(data=mydata, aes(x=carat, y=price))+
geom_point()
library(ggplot2)
ggplot(data=mydata, aes(x=carat, y=price))+
geom_point()
ggplot(data=mydata, aes(x=carat, y=price, color=clarity))+
geom_point()
ggplot(data=mydata, aes(x=carat, y=price, color=clarity))+
geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5], aes(x=carat, y=price, color=clarity))+
geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5,], aes(x=carat, y=price, color=clarity))+
geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5,], aes(x=carat, y=price, color=clarity))+
geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5,], aes(x=carat, y=price, color=clarity))+
geom_point(alpha=0.1)+
geom_smooth()
ggplot(data=mydata[mydata$carat<2.5,], aes(x=carat, y=price, color=clarity))+
+ geom_point(alpha=0.1)
ggplot(data=mydata[mydata$carat<2.5,], aes(x=carat, y=price, color=clarity))+
geom_point(alpha=0.1)
#integer
x <- 2L
typeof(x)
#double
y <- 2.5
#integer
x <- 2L
typeof(y)
#integer
x <- 2
typeof(x)
library(igraph)
install.packages("igraph")
install.packages("igraph")
install.packages("networkD3")
install.packages("htmlwidgets")
library(igraph)
library(networkD3)
data <- data_frame(
from=c("A", "A", "B", "D", "C", "D", "E", "B", "C", "D", "K", "A", "M"),
to=c("B", "E", "F", "A", "C", "A", "B", "Z", "A", "C", "A", "B", "K")
)
library(dplyr)
data <- data_frame(
from=c("A", "A", "B", "D", "C", "D", "E", "B", "C", "D", "K", "A", "M"),
to=c("B", "E", "F", "A", "C", "A", "B", "Z", "A", "C", "A", "B", "K")
)
p <- simpleNetwork(data, height="100px", width="100px")
p
saveWidget(p, file=paste0( getwd(), "/HtmlWidget/networkInteractive1.html"))
library(htmlwidgets)
saveWidget(p, file=paste0( getwd(), "/HtmlWidget/networkInteractive1.html"))
pwd
getwd()
saveWidget(p, file=paste0( getwd(), "networkInteractive1.html"))
saveWidget(p, file=paste0( getwd(), "/networkInteractive1.html"))
install.packages("circlize", "dplyr", "reshape2", dependencies=TRUE)
library(circlize)
install.packages(c("animation", "base64", "bit", "blob", "broom", "callr", "circlize", "cli", "cpp11", "crayon", "data.table", "dbplyr", "dplyr", "dtplyr", "forcats", "fs", "ggplot2", "googlesheets4", "haven", "hms", "httr", "isoband", "jsonlite", "lifecycle", "lubridate", "magick", "magrittr", "modelr", "network", "networkDynamic", "pillar", "png", "processx", "purrr", "RColorBrewer", "readr", "reprex", "rlang", "rstudioapi", "rvest", "sna", "tibble", "tidyr", "tidyselect", "tidyverse", "tzdb", "vctrs", "visNetwork", "vroom"))
library(jasonlite)
install.packages(jsonlite)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
getwd(0)
getwd()
setwd("./Documents/GitHub")
setwd("./Documents/GitRepo")
setwd("./data")
setwd("./rnetwork/data")
setwd("./r-network/data")
df <-read.csv("TRM.csv")
df
View(df)
View(df)
json <- toJSON(df, pretty=TRUE)
json
write(json, file = "TRM.json")
